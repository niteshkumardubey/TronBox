#include <Keypad.h>

const byte ROWS = 4; //four rows
const byte COLS = 3; //four columns
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};

byte rowPins[ROWS] = {50,51,52,53}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {49,48,47}; //connect to the column pinouts of the keypad

char cnt = 0, auth_flag = 0; //counter and authentication flag defined
char key_str[10], key_data[10]; //key_str buffer array will recv each key and store it, key_data will finally copy the array and be used furthr
char key_start = 0, key_stop=0;

char fed_id[10] = {'0','0','0'}; //Hard coded currently, will be updated by user Using Application. Can be handled through UART Interupt.
char fed_buf[10];
bool stringComplete = false;

//for gsm recving variables and buffers//
char rec = 0;
char rec_start = 0, rec_stop = 0, count = 0;
char rec_str[10], rec_data[10];
///.............///

volatile char shf1 = 0, shf2 = 0, shf3 = 0; //flags for each shelf declared to denote further whether open or close
volatile int b1 = 0; //pushbutton state

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
//SoftwareSerial gsm_port(18, 19); // RX1, TX1 for communication with GSM

void setup()
{
   pinMode(44, OUTPUT);
   pinMode(45, OUTPUT);
   pinMode(46, OUTPUT);  
   Serial.begin(9600);
   //gsm_port.begin(9600); 
   // Turn on the transmission, reception, and Receive interrupt 
   Serial1.begin(9600);    

   attachInterrupt(0, pin_ISR, RISING); //0 here defines pin 2 of Mega2560
   
}  

void pin_ISR() //ISR for when box is manually closed a latch gets closed and high value is recvd on pin 2(only pins 2,3 are GPIO interupt pin of Mega2560)//
{
    b1 = digitalRead(2);
    if(b1==HIGH)
    {
        digitalWrite(44, LOW);
        digitalWrite(45, LOW);
        digitalWrite(46, LOW);
        shf1 = 0; shf2 = 0; shf3 = 0; //Closing all the shelves above and reseting their flags
        Serial.println("Shelf has been closed");
        memset(&fed_id[0], '\0', sizeof(fed_id));
    }
}

void  serialEvent1()  //Serial Rx ISR
{
    while (Serial1.available()) 
    {
      rec = Serial1.read();
//      Serial1.println(rec);
//      digitalWrite(44, HIGH); 

        if((rec=='@') && (rec_start = 1))
        {
            memset(&fed_id[0], 1, sizeof(fed_id));       
            strcpy(fed_id, rec_str);
            rec_start= 0;
            rec_stop = 1;
            count = 0;
            memset(&rec_str[0], '\0', sizeof(rec_str)); 
            ///All play here with rec_data
            Serial1.println();
            //Serial1.println(rec_data);
            Serial1.println(fed_id);
            
        }
               
        if((rec_start==1)&&(rec!='@'))
        {
           rec_str[count] = rec;
           //Serial.println(rec);
           count++;
        }       
        
        if((rec=='$') && (rec_start==0))
        {
           count=0;
           memset(&rec_str[0], '\0', sizeof(rec_str));
           rec_start=1;
           //Serial1.println("recieving with storing started");          
        }
        
    }
  
}


void loop()
{
    char key = keypad.getKey();    
    //string format *....string...#//
    if (key)
    {
        if((key=='#') && (key_start = 1))
        {
            strcpy(key_data, key_str);
            key_start= 0;
            key_stop = 1;
            cnt = 0;
            memset(&key_str[0], '\0', sizeof(key_str)); //Making all contents of key_str array as null
            Serial.println();
            //Serial_str(key_data);
            Serial.println(key_data);
            
            //All play with key_data here //
            if(((strcmp(fed_id,key_data)==0)|(strcmp(fed_buf,key_data)==0))&&(key_stop==1))  //fed_id is the id already fed by user, currently hard coded
            {
              Serial.println("Authenticated");   
              Serial.println("Select Shelf");
              //Serial.println("Enter choice 1 or 2 or 3");
              auth_flag = 1;  
            }
            else
            {
              Serial.println("Order id incorrect");
            } 
            memset(&key_data[0], '\0', sizeof(key_data));
         }
          
        if((key_start==1)&&(key!='#'))
        {
           key_str[cnt] = key;
           Serial.print('X');
            //Serial.print(rec_str[cnt);
           cnt++;
        }
  
        if((key=='*') && (key_start==0))
        {
           cnt=0;
           memset(&key_str[0], '\0', sizeof(key_str));
           key_start=1;
           Serial.println("Enter order id: ");
           auth_flag = 0;
        }      
        
        if(auth_flag==1) //To process after authentication//
        {
            Serial.println("Enter choice 1 or 2 or 3");
             switch(key)
             { //try implementing shelf not oprning feature if occupied here with each case using 3 IR sensors.
              case '1': digitalWrite(44, HIGH);
                        shf1 = 1; 
                        Serial.println("Opening Shelf 1");                      
                         break; 
              case '2': digitalWrite(45, HIGH);
                        shf2 = 2;
                        Serial.println("Opening Shelf 2");
                         break;
              case '3': digitalWrite(46, HIGH);
                        shf3 = 3;
                        Serial.println("Opening Shelf 3");
                         break;
             }                
        }   
    }//closing for if(key)
   
}//closing for void loop()



 
